(require-extension byte-blob)
(define prog_name (car (cdr (argv))))
(define obj_name (car (cdr (cdr (argv)))))
(define data_name (car (cdr (cdr (cdr (argv))))))
(define prog (read (open-input-file prog_name)))
(define binary (byte-blob-replicate (expt 2 15) #x0f))
(define pass 0)
(define pi 0)
(define li 0)
(define data (open-output-file data_name))
(define (gen_param code literal)
  (if (= pass 1) (begin
    (assert (= (car literal) 1))
    (define instr (bitwise-ior code (bitwise-and (car (cdr literal)) #x0f)))
    (byte-blob-uset! binary pi instr)
    (format data "~X~%" instr)
  ))
  (set! pi (+ pi 1))
)
(define (gen code)
  (gen_param code (list 1 0))
)
(define (// slice literal)
  (if (= pass 1)
    (begin
      (assert (> (car literal) slice))
      (list 1 (bitwise-and (arithmetic-shift (car (cdr literal)) (- (* slice 4))) #x0f))
    )
  )
)
(define (++ offset literal)
  (if (= pass 1)
    (begin
      (assert (> (expt 16 (car literal)) offset))
      (list (car literal) (+ offset (car (cdr literal))))
    )
  )
)
(define (require m) (eval (read (open-input-file m))))
(define (qlit x) (list 4 x))
(define (dlit x) (list 2 x))
(define (lit x) (list 1 x))
(define l_refs (make-hash-table))
(define (label)
  (define lref li)
  (set! li (+ li 1))
  (if (= pass 0)
    lref
    (qlit (hash-table-ref l_refs lref))
  )
)
(define (>> lref)
  (if (= pass 0)
    (hash-table-set! l_refs lref pi)
  )
)
(define (nop) (gen #x00))
(define (ld_a_@b) (gen #x01))
(define (add_@b) (gen #x02))
(define (cmp_@b) (gen #x03))
(define (nor_@b) (gen #x04))
(define (ld_a_@c) (gen #x05))
(define (add_@c) (gen #x06))
(define (cmp_@c) (gen #x07))
(define (nor_@c) (gen #x08))
(define (bc_b) (gen #x09))
(define (bz_b) (gen #x0a))
(define (bu_b) (gen #x0b))
(define (st_a_@b) (gen #x0c))
(define (st_a_@c) (gen #x0d))
(define (ror) (gen #x0e))
(define (hlt) (gen #x0f))

(define (ld_a p) (gen_param #x10 p))
(define (add p) (gen_param #x20 p))
(define (cmp p) (gen_param #x30 p))
(define (nor p) (gen_param #x40 p))
(define (out p) (gen_param #x50 p))
(define (in p) (gen_param #x60 p))

(define (ld_b0_a) (gen #x70))
(define (ld_b1_a) (gen #x71))
(define (ld_b2_a) (gen #x72))
(define (ld_b3_a) (gen #x73))
(define (ld_c0_a) (gen #x74))
(define (ld_c1_a) (gen #x75))
(define (ld_c2_a) (gen #x76))
(define (ld_c3_a) (gen #x77))
(define (ld_b0_@c) (gen #x78))
(define (ld_b1_@c) (gen #x79))
(define (ld_b2_@c) (gen #x7a))
(define (ld_b3_@c) (gen #x7b))
(define (ld_c0_@b) (gen #x7c))
(define (ld_c1_@b) (gen #x7d))
(define (ld_c2_@b) (gen #x7e))
(define (ld_c3_@b) (gen #x7f))

(define (ld_b0 p) (gen_param #x80 p))
(define (ld_b1 p) (gen_param #x90 p))
(define (ld_b2 p) (gen_param #xa0 p))
(define (ld_b3 p) (gen_param #xb0 p))
(define (ld_c0 p) (gen_param #xc0 p))
(define (ld_c1 p) (gen_param #xd0 p))
(define (ld_c2 p) (gen_param #xe0 p))
(define (ld_c3 p) (gen_param #xf0 p))
(eval prog)
(__init)
(set! li 0)
(set! pi 0)
(set! pass 1)
(__init)
(byte-blob-write (open-output-file obj_name) binary)
