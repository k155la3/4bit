#!/usr/bin/env node

var _ = require('lodash');
var csv = require('csv');
var fs = require('fs');
var program = require('commander');
var util = require('util');
var repl = require('repl');

var pc = 0;
var a = 0;
var flags = 0;
var b0 = 0;
var b1 = 0;
var b2 = 0;
var c0 = 0;
var c1 = 0;
var c2 = 0;
var inPort = 0;
var outPorts = [];
var mem = [];

var ucode0 = fs.readFileSync('ucode0.bin');
var ucode1 = fs.readFileSync('ucode1.bin');
var ucode2 = fs.readFileSync('ucode2.bin');
var binaryByte = function (x) {
  return '0b' + ('00000000' + (x).toString(2)).substr(-8);
}
var binaryWord = function (x) {
  return '0b' + ('0000' + (x).toString(2)).substr(-4);
}
var arrDump = function (arr) {
  var dump = '';
  for (var i = 0; i < arr.length; ++i) {
    var v;
    if ((v = arr[i]) !== undefined) {
      dump += ('@0x' + i.toString(16) + '=' + binaryWord(v) + ' ');
    }
  }
  return dump;
}
var columns = {
  pc: 'PC',
  flags: '~(00ZC)',
  a: 'A',
  b2: 'B2',
  b1: 'B1',
  b0: 'B0',
  c2: 'C2',
  c1: 'C1',
  c0: 'C0',
  mem: 'MEM',
  out: 'OUT'
};
var prog = new Buffer(0);

program
  .version('0.0.1')
  .option('-m, --module [value]', 'Module [output]', 'output')
  .option('-t, --trace', 'Write trace file')
  .parse(process.argv);

prog = fs.readFileSync(program.module + '.obj');
map = JSON.parse(fs.readFileSync(program.module + '.map', 'utf8'));
defs = JSON.parse(fs.readFileSync(program.module + '.def', 'utf8'));

var trace;
if (program.trace) {
  trace = csv.stringify({ header: true, columns: columns });
  trace.pipe(fs.createWriteStream(program.module + '_trace.csv'));
}

var dbgCtx = {
  a: { inspect: function () { return '0x' + a.toString(16); }},
  b: { inspect: function () { return '0x' + (b0 | (b1 << 4) | (b2 << 8)).toString(16); }},
  c: { inspect: function () { return '0x' + (c0 | (c1 << 4) | (c2 << 8)).toString(16); }},
  m: function (addr) {
    return {
      inspect: function () {
        var v = mem[addr];
        return '0x' + ((v !== undefined) ? v.toString(16) : '?');
      }
    }
  },
  m4: function (addr) {
    return {
      inspect: function () {
        var v0 = mem[addr];
        var v1 = mem[addr + 1];
        var v2 = mem[addr + 2];
        var v3 = mem[addr + 3];
        return '0x' + ((v3 !== undefined) ? v3.toString(16) : '?') +
          ((v2 !== undefined) ? v2.toString(16) : '?') +
          ((v1 !== undefined) ? v1.toString(16) : '?') +
          ((v0 !== undefined) ? v0.toString(16) : '?');
      }
    }
  }
};
var dbg = repl.start({ prompt: program.module + '> ' });
_.merge(dbg.context, dbgCtx);

dbg.on('reset', function (context) {
  _.merge(dbg.context, dbgCtx);
});
dbg.on('exit', function (context) {
  if (trace) {
    trace.end();
  }
});

var error =  function (msg) {
  return { error: msg };
}
var warning =  function (msg) {
  return { warning: msg };
}

var runAlu = function (m, s, notCRIN, a, b) {
  var f = function (x) {
    return {f: (x & 0xf), notCROUT: (x & 0x10) ? 0 : 1};
  };
  if (m) {
    switch (s) {
      case 0x1:
        return f((~(a | b)) & 0xf);
      case 0xa:
        return f(b);
      default:
        return error('Unsupported ALU operation');
    }
  }
  else {
    switch (s) {
      case 0x0:
        return f(a + (notCRIN ? 0 : 1));
      case 0x6:
        return f((a + ((~b) & 0xf)) + (notCRIN ? 0 : 1));
      case 0x9:
        return f((a + b) + (notCRIN ? 0 : 1));
      default:
        return error('Unsupported ALU operation');
    }
  }
}

var runMachine = function () {
  if (trace) {
    trace.write({
      pc: '0x' + pc.toString(16),
      a: binaryWord(a),
      b0: binaryWord(b0),
      b1: binaryWord(b1),
      b2: binaryWord(b2),
      c0: binaryWord(c0),
      c1: binaryWord(c1),
      c2: binaryWord(c2),
      flags: binaryWord(flags),
      mem: arrDump(mem),
      out: arrDump(outPorts)
    });
  }

  // SETUP PHASE
  // 0: Setup instruction and flags
  var currProg = prog[pc];
  var currOperand = currProg & 0xf;
  var currUcode = currProg | (flags << 8);

  // 1: Setup CONTROL
  var control0 = ucode0[currUcode];
  var control1 = ucode1[currUcode];
  var control2 = ucode2[currUcode];

  var INCPC = (control0 & 0x1);
  var notLDPC = (control0 & 0x2);
  var notCRIN = (control0 & 0x4);
  var ALUM = (control0 & 0x8);
  var ALUS = (control0 >> 4);

  var notOEOP = (control1 & 0x1);
  var notLDA = (control1 & 0x2);
  var notLDFL = (control1 & 0x4);
  var notOEALU = (control1 & 0x8);
  var notLDALU = (control1 & 0x10);
  var notWERAM = (control1 & 0x20);
  var notRERAM = (control1 & 0x40);

  var SEL = (control2 & 0x7);
  var notLDOUT = (control2 & 0x8);
  var notOEIN = (control2 & 0x10);
  var notLDBC = (control2 & 0x20);
  var notOEB = (control2 & 0x40);
  var notOEC = (control2 & 0x80);

  var alu = null;
  var data = null;
  var dataActive = 0;
  var address = null;
  var addressActive = 0;

  if (!INCPC && notLDPC) {
    return warning('Halted at PC: 0x' + pc.toString(16));
  }

  // 2: Setup ADDRESS
  if (!notOEB) {
    address = b0 | (b1 << 4) | (b2 << 8);
    addressActive++;
  }
  if (!notOEC) {
    address = c0 | (c1 << 4) | (c2 << 8);
    addressActive++;
  }
  if (addressActive > 1) {
    return error('Address conflict');
  }

  // 3: Setup DATA
  if (!notRERAM) {
    if (addressActive == 0) {
      return error('Address inactive');
    }
    if ((data = mem[address]) === undefined) {
      warning('Reading uninitialized RAM at 0x' + address.toString(16) + ' at PC: 0x' + pc.toString(16));
    }
    dataActive++;
  } 
  if (!notOEOP) {
    data = currOperand;
    dataActive++;
  }
  if (!notOEIN) {
    data = inPort;
    dataActive++;
  }
  if (notLDALU) {
    alu = runAlu(
      ALUM,
      ALUS,
      notCRIN,
      a,
      (a >> 1) | (a << 3)
    );
  }
  if (!notOEALU) {
    if (alu == null) {
      return error('ALU conflict');
    }
    if (alu.error !== undefined) {
      return alu;
    }
    data = alu.f;
    dataActive++;
  }
  if (dataActive > 1) {
    return error('Data conflict');
  }

  // 4: Setup ALU
  if (!notLDALU) {
    if (dataActive == 0) {
      return error('Data inactive');
    }
    alu = runAlu(
      ALUM,
      ALUS,
      notCRIN,
      a,
      data
    );
    if (alu.error !== undefined) {
      return alu;
    }
  }

  // WRITE PHASE
  // 5: Write BC, OUT and RAM
  if (!notLDBC || !notLDOUT || !notWERAM) {
    if (dataActive == 0) {
      return error('Data inactive');
    }
    if (!notLDBC) {
      if (SEL === 0) {
        b0 = data;
      }
      if (SEL === 1) {
        b1 = data;
      }
      if (SEL === 2) {
        b2 = data;
      }
      if (SEL === 4) {
        c0 = data;
      }
      if (SEL === 5) {
        c1 = data;
      }
      if (SEL === 6) {
        c2 = data;
      }
    }
    if (!notLDOUT) {
      outPorts[SEL] = data;
    }
    if (!notWERAM) {
      mem[address] = data;
    }
  }

  // 6: Write register A and FLAGS
  if (!notLDA || !notLDFL) {
    if (alu === null) {
      return error('ALU inactive');
    }
    if (alu.error !== undefined) {
      return alu;
      }
    if (!notLDA) {
      a = alu.f;
    }
    if (!notLDFL) {
      if (alu.notCROUT) {
        flags |= 0x1;
      }
      else {
        flags &= (~0x1);
      }
      if (alu.f === 0) {
        flags &= (~0x2);
      }
      else {
        flags |= 0x2;
      }
    }
  }

  // 7: Write PC
  if (!notLDPC) {
    if (addressActive == 0) {
      return error('Address inactive');
    }
    pc = address;
  }
  else if (INCPC) {
    pc++;
  }

  return { success: true };
};
var cycles = 0;
var sources = {};
var macroDepth = 0;
var getLines = function (iname) {
  var lines = sources[iname];
  if (!lines) {
    lines = fs.readFileSync(iname, 'utf8').split(/\n|;/);
    sources[iname] = lines;
  }
  return lines;
};
var showLine = function (lines, iname, lnum, prefix, suffix) {
  if (lnum > 0 && lnum <= lines.length) {
    dbg.output.write(util.format('%s:%s%s%s%s\n', (iname + '                        ').substr(0, 24), ('000000' + lnum).substr(-6), prefix, lines[lnum - 1], suffix));
  }
};
var currProg = function () {
  var p = map[pc];
  var depth = macroDepth;
  while (depth) {
    p = p.macroRef;
    depth--;
  }
  return p;
};
var run = function () {
  cycles++;
  return runMachine();
};
var afterRun = function () {
  var p = map[pc];
  macroDepth = -1;
  while (p) {
    macroDepth++;
    p = p.macroRef;
  }
};
var showState = function (r) {
  if (r.error) {
    dbg.output.write(util.format('[ERROR] %s\n', r.error));
    process.exit(1);
  }
  if (r.warning) {
    dbg.output.write(util.format('[WARNING] %s\n', r.warning));
  }
  dbg.output.write(util.format('\n------------------------------------------\nCycles: %s PC: %s ~(00ZC): %s\n------------------------------------------\n', cycles, '0x' + pc.toString(16), binaryWord(flags))); 
  var p = currProg();
  if (p) {
    var lines = getLines(p.iname);
    var suffix = _.reduce(p.args, function (s, arg) {
      if (arg.name) {
        var def;
        if (def = defs[arg.name]) {
          if (def.alloc) {
            return s + util.format(' %s/%d=0x%s', arg.name, def.size, def.val.toString(16));
          }
          if (def.label) {
            return s + util.format(' %s:%d', p.iname, map[def.val].lnum);
          }
        }
      }
      return s;
    }, '');
    showLine(lines, p.iname, p.lnum - 4, ' | ', '');
    showLine(lines, p.iname, p.lnum - 3, ' | ', '');
    showLine(lines, p.iname, p.lnum - 2, ' | ', '');
    showLine(lines, p.iname, p.lnum - 1, ' | ', '');
    showLine(lines, p.iname, p.lnum, ' > ', suffix);
    showLine(lines, p.iname, p.lnum + 1, ' | ', '');
    showLine(lines, p.iname, p.lnum + 2, ' | ', '');
    showLine(lines, p.iname, p.lnum + 3, ' | ', '');
    showLine(lines, p.iname, p.lnum + 4, ' | ', '');
  }
  else {
    dbg.output.write(util.format('[WARNING] No symbols\n'));
  }
  cycles = 0;
};
var breakpoints = {};
var go = function() {
  var r;
  do {
    r = run();
    var willBreak = false;
    var p = map[pc];
    while (p) {
      var lines;
      if ((lines = breakpoints[p.iname]) !== undefined) {
        if (lines[p.lnum]) {
          willBreak = true;
	  break;
        }
      }
      p = p.macroRef;
    }
    if (willBreak) {
      break;
    }
  } while(r.success);
  afterRun();
  showState(r);
  dbg.displayPrompt();
};
var addBreakpoint = function(location) {
  var parts = location.split(':');
  if (parts.length === 2) {
    var lines = breakpoints[parts[0]];
    if (!lines) {
      lines = breakpoints[parts[0]] = {};
    }
    lines[parseInt(parts[1])] = true;
  }
  dbg.displayPrompt();
};
var step = function() {
  if (macroDepth) {
    macroDepth--;
    showState({});
  }
  else {
    var r = run();
    afterRun();
    showState(r);
  }
  dbg.displayPrompt();
};
var stepOver = function() {
  var p = currProg();
  if (p && p.macro) {
    var ret = p.ret;
    var branch;
    if (p.args.length) {
      var def;
      if ((def = defs[p.args[0].name]) && def.label) {
        branch = def.val;
      }
    }
    var r;
    do {
      r = run();
    } while(r.success && (pc != ret) && (pc != branch));
    afterRun();
    showState(r);
    dbg.displayPrompt();
  }
  else {
    step();
  }
};
var reset = function() {
  pc = 0;
  afterRun();
  showState({});
  dbg.displayPrompt();
};

dbg.defineCommand('b', {
  help: 'Add breakpoint',
  action: addBreakpoint
});
dbg.defineCommand('g', {
  help: 'Continue execution',
  action: go
});
dbg.defineCommand('s', {
  help: 'Step execution',
  action: step
});
dbg.defineCommand('so', {
  help: 'Step execution',
  action: stepOver
});
dbg.defineCommand('r', {
  help: 'Reset execution',
  action: reset
});
reset();
