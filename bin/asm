#!/usr/bin/env node

var _ = require('lodash');
var util = require('util');
var program = require('commander');
var fs = require('fs');

var exit =  function (iname, lnum, msg) {
  console.error(util.format('%s:%d [ERROR] %s', iname, lnum, msg));
  process.exit(1);
}

var inputFileNames = function (v) {
  return v.split(' ');
};

program
  .version('0.0.1')
  .option('-i, --inputs <items>', 'Input files', inputFileNames)
  .option('-o, --output [value]', 'Output module [output]', 'output')
  .parse(process.argv);

var inputs = [];
_.forEach(program.inputs, function (fileName) {
  inputs.push({ name: fileName, lines: fs.readFileSync(fileName, 'utf8').split(/\n|;/) });
});

// Pass 1
var base = 0;
var macros = {};
var currMacro = null;
var codes = {
  'nop': 0,
  'ld_a_@b': 0x01,
  'add_@b': 0x02,
  'cmp_@b': 0x03,
  'nor_@b': 0x04,
  'ld_a_@c': 0x05,
  'add_@c': 0x06,
  'cmp_@c': 0x07,
  'nor_@c': 0x08,
  'bc_b': 0x09,
  'bz_b': 0x0a,
  'bu_b': 0x0b,
  'st_a_@b': 0x0c,
  'st_a_@c': 0x0d,
  'ror': 0x0e,
  'hlt': 0x0f,
  'ld_a': 0x10,
  'add': 0x20,
  'cmp': 0x30,
  'nor': 0x40,
  'out': 0x50,
  'in': 0x60,
  'ld_b0_a': 0x70,
  'ld_b1_a': 0x71,
  'ld_b2_a': 0x72,
  'ld_b3_a': 0x73,
  'ld_c0_a': 0x74,
  'ld_c1_a': 0x75,
  'ld_c2_a': 0x76,
  'ld_c3_a': 0x77,
  'ld_b0_@c': 0x78,
  'ld_b1_@c': 0x79,
  'ld_b2_@c': 0x7a,
  'ld_b3_@c': 0x7b,
  'ld_c0_@b': 0x7c,
  'ld_c1_@b': 0x7d,
  'ld_c2_@b': 0x7e,
  'ld_c3_@b': 0x7f,
  'ld_b0': 0x80,
  'ld_b1': 0x90,
  'ld_b2': 0xa0,
  'ld_b3': 0xb0,
  'ld_c0': 0xc0,
  'ld_c1': 0xd0,
  'ld_c2': 0xe0,
  'ld_c3': 0xf0,
};
var numOfArgs = function (code) {
  return ((code & 0xf0) === 0x00 || (code & 0xf0) === 0x70) ? 0 : 1;
};
for (var i = 0; i < inputs.length; ++i) {
  var input = inputs[i];
  var label = undefined;
  for (var k = 0; k < input.lines.length; ++k) {
    var lnum = k + 1;
    var iname = input.name;
    var parseArg = function (arg) {
      if (arg.startsWith('0x')) {
        var hexVal = arg.substr(2);
        return { lit: parseInt(hexVal, 16), size: hexVal.length };
      }
      else if (arg.startsWith('"') && arg.length > 1) {
        return { lit: arg.charCodeAt(1) , size: 2 };
      }
      else {
        var parts0 = arg.split('/')
        if (parts0.length === 2) {
          var name = parts0[0];
          var slice;
          var step;
          var parts1 = parts0[1].split('+')
          if (parts1.length === 2) {
            slice = parseInt(parts1[0]);
            step = parseInt(parts1[1]);
            if (isNaN(step) || step > 3) {
              exit(iname, lnum, util.format('"%s" invalid step', arg));
            }
          }
          else {
            slice = parseInt(parts0[1]);
          }
          if (isNaN(slice) || slice > 3) {
            exit(iname, lnum, util.format('"%s" invalid slice', arg));
          }
          return { name: name, slice: slice, step: step };
        }
        else {
          var parts0 = arg.split('+0x')
          if (parts0.length === 2) {
            var name = parts0[0];
            var offset = parseInt(parts0[1], 16);
            if (isNaN(offset)) {
              exit(iname, lnum, util.format('"%s" invalid offset', arg));
            }
            return { name: name, offset: offset };
          }
          else {
            return { name: arg };
          }
        }
      }
    };
    var tokens = _.takeWhile(input.lines[k].split(/\t| /).filter(function (t) { return t.length; }), function (t) { return t !== '#'; });
    if (!tokens.length) continue;
    if (tokens[0] === 'end') {
      label = undefined;
      if (currMacro) {
        currMacro = null;
      }
      else {
        exit(iname, lnum, util.format('Unexpected "end"'));
      }
    }
    else if (currMacro) {
      if (tokens[0] === 'def') {
        var parts = tokens[1].split('=0x')
        if (parts.length === 2) {
	  var name = parts[0];
          var val;
          if (isNaN(val = parseInt(parts[1], 16))) {
            exit(iname, lnum, util.format('"%s" invalid hexadecimal', parts[1]));
          }
          if (currMacro.defs[name] !== undefined) {
            exit(iname, lnum, util.format('"%s" already defined', name));
          }
          currMacro.defs[name] = { val: val, size: parts[1].length };
        }
        else {
          parts = tokens[1].split('*')
          if (parts.length === 2) {
	    var name = parts[0];
            var size;
            if (isNaN(size = parseInt(parts[1]))) {
              exit(iname, lnum, util.format('"%s" invalid name size', parts[1]));
            }
            if (size == 2) {
              while (((base & 0xf) | 0xe) !== 0xe) {
                base++;
              }
            }
            else if (size > 2 && size <= 4) {
              while (((base & 0xf) | 0xc) !== 0xc) {
                base++;
              }
            }
            if (currMacro.defs[name] !== undefined) {
              exit(iname, lnum, util.format('"%s" already defined', name));
            }
            currMacro.defs[name] = { val: base, size: 4, allocSize: size, alloc: true };
            base += size;
          }
        }
      }
      else {
        var y = 0;
	var label0 = tokens[y];
        if (label0.length > 1 && label0[label0.length - 1] === ':') {
          label = label0.substr(0, label0.length - 1);
          y += 1;
        }
        var name = tokens[y];
	if (name !== undefined) {
          var args = _.map(tokens.slice(y + 1), function (arg) { return parseArg(arg, lnum, iname); });
          var code;
          var p;
          if ((code = codes[name]) !== undefined) {
            var expNumOfArgs = numOfArgs(code)
            if (expNumOfArgs > args.length) {
              exit(iname, lnum, util.format('"%s" has less arguments than expected', name));
            }
            else if (expNumOfArgs < args.length) {
              exit(iname, lnum, util.format('"%s" has more arguments than expected', name));
            }
            p = {code: code, instr: name, args: args, label: label, lnum: lnum, iname: iname};
          }
          else {
            p = {macro: name, args: args, label: label, lnum: lnum, iname: iname};
          }
	  label = undefined;
          currMacro.prog.push(p);
	}
      }
    }
    else if (tokens[0] === 'macro' && tokens.length > 1) {
      if (currMacro) {
        exit(iname, lnum, util.format('Expected "end"'));
      }
      else {
        var name = tokens[1];
        currMacro = macros[name];
        if (currMacro === undefined) {
          currMacro = { prog: [], defs: {}, aliases: tokens.slice(2) }
          macros[name] = currMacro;
        }
      }
    }
  }
}

// Pass 2
var addr = 0;
var objProg = {};
var objDefs = {};
var namespaces = {};
var generate = function (macroProg, macroDefs, renaming, namespace) {
  var rename = function (name) {
    if (name.indexOf('$') !== -1) {
      return name;
    }
    if (namespace.scope === 0) {
      return namespace.macro + '$' + name;
    }
    return namespace.macro + '$' + name + '$' + namespace.scope;
  };
  var renameDef = function (_, name) {
    return rename(name);
  };
  var prog = _.cloneDeep(macroProg);
  var defs = _.mapKeys(macroDefs, renameDef);
  for (var i = 0; i < prog.length; ++i) {
    var p = prog[i];
    var renameArg = function (arg) {
      if (arg.lit !== undefined) {
        return arg;
      }
      else {
        var renamedArg;
        if (renamedArg = _.cloneDeep(renaming[arg.name])) {
          if (renamedArg.lit !== undefined) {
            var lit = renamedArg.lit + (arg.offset !== undefined ? arg.offset : 0);  
            delete arg.name;
            if (arg.slice !== undefined) {
              if (arg.slice < 0 || arg.slice >= renamedArg.size) {
                exit(p.iname, p.lnum, util.format('"0x%s/%d" slice is to large; maximum is %d', renamedArg.lit.toString(16), arg.slice, renamedArg.size - 1));
              }
              arg.lit = (((lit >> (arg.slice * 4)) + (arg.step === undefined ? 0 : arg.step)) & 0xf);
              arg.size = 1;
            }
	    else {
              arg.lit = lit;
	      arg.size = renamedArg.size;
            }
            return arg;
          }
          else {
            if (arg.slice !== undefined && renamedArg.slice !== undefined) {
              exit(p.iname, p.lnum, util.format('"%s" is double-sliced', renamedArg.name));
            }
	    if (arg.offset !== undefined && renamedArg.offset !== undefined) {
              exit(p.iname, p.lnum, util.format('"%s" is double-offset', renamedArg.name));
            }
            if (renamedArg.slice === undefined) {
              renamedArg.slice = arg.slice;
              renamedArg.step = arg.step;
            }
            if (renamedArg.offset === undefined) {
              renamedArg.offset = arg.offset;
            }
            return renamedArg;
          }
        }
        else {
          arg.name = rename(arg.name);
          return arg;
        }
      }
    };
    p.args = _.map(p.args, renameArg)
    var label = p.label;
    if (label) {
      label = rename(label);
      var name;
      if (name = defs[label]) {
        if (name.label) {
          exit(p.iname, p.lnum, util.format('"%s" used as label more than once', label));
          process.exit(1);
        }
        if (name.alloc) {
          exit(p.iname, p.lnum, util.format('"%s" RAM allocation cannot be used as label', label));
        }
        if (name.size !== 4) {
          exit(p.iname, p.lnum, util.format('"%s" label must be of size 4', label));
        }
        addr = name.val;
        name.label = true;
      }
      else {
        defs[label] = { val: addr, size: 4, label: true };
      }
    }
    if (addr > 0xfff) {
      exit(p.iname, p.lnum, 'Out of ROM space');
    }
    if (objProg[addr]) {
      if (objProg[addr].macro !== undefined) {
        p.macroRef = objProg[addr];
      }
      else {
        exit(p.iname, p.lnum, util.format('ROM placement conflict at 0x%s', addr.toString(16)));
      }
    }
    objProg[addr] = p;
    if (p.macro === undefined) {
      addr += 1;
    }
    if (p.macro !== undefined) {
      var macro;
      if ((macro = macros[p.macro]) !== undefined) {
        if (macro.aliases.length !== p.args.length) {
          exit(p.iname, p.lnum, util.format('invalid number of macro arguments for "%s"', p.macro));
        }
        var macroRenaming = {};
        for (var k = 0; k < macro.aliases.length; ++k) {
          var alias = macro.aliases[k];
          var arg = p.args[k];
          macroRenaming[alias] = arg;
        }
        var nextNamespace;
        if ((nextNamespace = namespaces[p.macro]) === undefined) {
          namespaces[p.macro] = nextNamespace = { macro: p.macro, scope: 0 };
        }
	var prevAddr = addr;
        generate(macro.prog, macro.defs, macroRenaming, nextNamespace);
        if (addr === prevAddr) {
	  delete objProg[addr];
        }
        else {
          p.ret = addr;
          nextNamespace.scope++;
        }
      }
      else {
        exit(p.iname, p.lnum, util.format('"%s" macro is undefined', p.macro));
      }
    }
  }
  defs[rename('__end')] = { val: addr, size: 4, label: true };
  _.assign(objDefs, defs);
}

var mainMacro;
if ((mainMacro = macros['__init']) === undefined) {
  exit('?', 0, util.format('"__init" macro undefined'));
}
generate(mainMacro.prog, mainMacro.defs, {}, { macro: '__init', scope: 0 });

// Pass 3
var obj = new Buffer(32 * 1024);
obj.fill(0xf);
obj.writeWithArg = function (code, immediate, addr) {
  this.writeUInt8(code | (immediate & 0xf), addr);
};
for (var i = 0; i < obj.length; ++i) {
  var p;
  if (p = objProg[i]) {
    var resolveArg = function (arg, expSize) {
      if (arg.lit !== undefined) {
        if (arg.size != expSize) {
          exit(p.iname, p.lnum, util.format('"0x%s" literal size of %d is invalid; expected size %d', arg.lit.toString(16), arg.size, expSize));
          process.exit(1);
        }
        return arg.lit;
      }
      else {
        var def;
        if (def = objDefs[arg.name]) {
          var val = def.val + (arg.offset !== undefined ? arg.offset : 0);
          if (arg.slice !== undefined) {
            if (arg.slice < 0 || arg.slice >= def.size) {
              exit(p.iname, p.lnum, util.format('"%s/%d" slice is to large; maximum is %d', arg.name, arg.slice, def.size - 1));
            }
            return (((val >> (arg.slice * 4)) + (arg.step === undefined ? 0 : arg.step)) & 0xf);
          }
          else {
            if (def.size != expSize) {
              exit(p.iname, p.lnum, util.format('"%s*%d" size mismatch; expected size %d', arg.name, def.size, expSize));
            }
            return val;
          }
        }
        else {
          exit(p.iname, p.lnum, util.format('"%s" name is not defined', arg.name));
        }
      }
    }
    if (p.args.length === 1) {
      obj.writeWithArg(p.code, resolveArg(p.args[0], 1), i);
    }
    else {
      obj.writeUInt8(p.code, i);
    }
  }
}
fs.writeFileSync(program.output + '.map', JSON.stringify(objProg));
fs.writeFileSync(program.output + '.def', JSON.stringify(objDefs));
fs.writeFileSync(program.output + '.obj', obj);
