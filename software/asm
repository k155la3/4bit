#!/usr/bin/env node

var asm = '';
process.stdin.resume();
process.stdin.on('data', function (buf) { asm += buf.toString('utf8'); });
process.stdin.on('end', function () {
  var lines = asm.split('\n');
  var main = [];
  for (var i = 0; i < lines.length; ++i) {
    var tokens = lines[i].split(/\t| /).filter(function (t) { return t.length; });
    if (!tokens.length) continue;
    var label = null;
    var y = 0;
    if (tokens[y].length > 1 && tokens[y][tokens[y].length - 1] === ':') {
      label = tokens[y].substr(0, tokens[y].length - 1);
      y += 1;
    }
    var mnem = tokens[y];
    var params = tokens.slice(y + 1);
    main.push({mnem: mnem, params: params, label: label});
  }
  var noargMnems = { 'nop': true, 'bu_b': true, 'bc_b': true, 'bz_b': true  };
  var argMnems = { 'ld_b0': true, 'ldi': true, 'addi': true, 'cmpi': true, 'nori': true, 'subi': true };
  var addr = 0;
  var labelAddrs = {};
  for (var i = 0; i < main.length; ++i) {
    var label = main[i].label;
    if (label) {
      labelAddrs[label] = addr;
    }
    var mnem = main[i].mnem;
    if (noargMnems[mnem]) {
      main[i].addr = addr;
      addr += 1;
    }
    else if (argMnems[mnem]) {
      main[i].addr = addr;
      addr += 1;
    }
    else {
      console.error('Unknown mnem: ' + mnem);
      process.exit(1);
    }
  }
  var code = {
    'nop': 0,
    'bc_b': 0x09,
    'bz_b': 0x0a,
    'bu_b': 0x0b,
    'ldi': 0x10,
    'addi': 0x20,
    'cmpi': 0x30,
    'nori': 0x40,
    'nori': 0x50,
    'ld_b0': 0x70,
  };
  var obj = new Buffer(8192);
  obj.fill(0);
  for (var i = 0; i < obj.length; ++i) {
    obj[i] = 0;
  }
  obj.writeWithArg = function (code, immediate, addr) {
    this.writeUInt8(code | (immediate & 0xf), addr);
  }
  /*var label = main[i].params[0];
  var labelAddr = labelAddrs[label];
  if (labelAddr === undefined) {
    console.error('Unknown label: ' + label);
    process.exit(1);
  }*/
  for (var i = 0; i < main.length; ++i) {
    var mnem = main[i].mnem;
    if (noargMnems[mnem]) {
      obj.writeUInt8(code[mnem], main[i].addr);
    }
    else if (argMnems[mnem]) {
      var immediateHex = main[i].params[0];
      var immediate = parseInt(immediateHex, 16);
      obj.writeWithArg(code[mnem], immediate, main[i].addr);
    }
  }
  process.stdout.write(obj);
});
